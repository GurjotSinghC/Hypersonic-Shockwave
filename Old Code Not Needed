OLD CODEEE # # # # Python code to read image
# # # import cv2

# # # # To read image from disk, we use
# # # # cv2.imread function, in below method,
# # # img = cv2.imread("fixedproper.jpg", cv2.IMREAD_COLOR)
# # # cv2.namedWindow('wundu',cv2.WINDOW_NORMAL)
# # # # Creating GUI window to display an image on screen
# # # # first Parameter is windows title (should be in string format)
# # # # Second Parameter is image array
# # # cv2.imshow("wundu", img)

# # # # To hold the window on screen, we use cv2.waitKey method
# # # # Once it detected the close input, it will release the control
# # # # To the next line
# # # # First Parameter is for holding screen for specified milliseconds
# # # # It should be positive integer. If 0 pass an parameter, then it will
# # # # hold the screen until user close it.
# # # cv2.waitKey(0)

# # # # It is for removing/deleting created GUI window from screen
# # # # and memory
# # # cv2.destroyAllWindows()

# # # # import json

# # # # x = '{"employee":{"name":["y":5555], "age":30, "city":"New York"}}'

# # # # y = json.loads(x)

# # # # print(y["employee"]["name"])

# # # if(1>3):
# # #      a = input()

# # # else:
# # #     print("YOLO")

# # # if(a):
# # #     print("value =",a)
# # a = ""

# # # print(len(a))

# # import numpy as np
# # import matplotlib.pyplot as plt

# # # --- 1. Define Simulation Parameters ---
# # grid_size = 50  # Number of grid points in x and y directions (e.g., 50x50 grid)
# # tolerance = 1e-4 # Convergence criterion: stop when max temperature change is below this
# # max_iterations = 10000 # Maximum number of iterations to prevent infinite loops

# # # Define boundary temperatures
# # T_hot_top = 100.0   # Temperature at the top edge
# # T_cold_bottom = 0.0 # Temperature at the bottom edge
# # T_left = 75.0       # Temperature at the left edge
# # T_right = 25.0      # Temperature at the right edge

# # # --- 2. Initialize the Temperature Field (Grid) ---
# # # Create a 2D NumPy array for temperature, initialized to zeros.
# # # This array will store the temperature at each grid point.
# # T = np.zeros((grid_size, grid_size))

# # # Apply boundary conditions (Dirichlet boundaries - fixed temperatures)
# # # Top edge: Set the first row (index 0) to T_hot_top
# # T[0, :] = T_hot_top
# # # Bottom edge: Set the last row (index grid_size-1) to T_cold_bottom
# # T[grid_size - 1, :] = T_cold_bottom
# # # Left edge: Set the first column (index 0) to T_left
# # T[:, 0] = T_left
# # # Right edge: Set the last column (index grid_size-1) to T_right
# # T[:, grid_size - 1] = T_right

# # # The corners might be overwritten multiple times, which is fine;
# # # their values are fixed by the most recent boundary condition application.

# # print("Initial temperature grid with boundary conditions:")
# # print(T)

# # # --- 3. Iterative Solver (Gauss-Seidel Method) ---
# # # This loop will repeatedly update the temperature at each interior point
# # # until the solution converges (i.e., temperatures stop changing significantly).

# # iteration = 0
# # max_delta = 1.0 # Initialize max_delta to a value greater than tolerance

# # print("\nStarting iterative solver...")
# # while max_delta > tolerance and iteration < max_iterations:
# #     # Create a copy of the current temperature field to store the previous state.
# #     # This is necessary to calculate the change (delta) after updating the grid.
# #     T_old = T.copy()

# #     # Iterate over the interior points of the grid.
# #     # We skip the boundary points as their temperatures are fixed.
# #     for i in range(1, grid_size - 1): # Rows (y-direction)
# #         for j in range(1, grid_size - 1): # Columns (x-direction)
# #             # Apply the finite difference equation (Gauss-Seidel update)
# #             # T[i,j] is updated using the *most recently computed* neighbor values.
# #             T[i, j] = 0.25 * (T[i + 1, j] + T[i - 1, j] + \
# #                               T[i, j + 1] + T[i, j - 1])

# #     # Calculate the maximum absolute difference between the new and old temperature fields.
# #     # This 'max_delta' tells us how much the solution changed in this iteration.
# #     max_delta = np.max(np.abs(T - T_old))

# #     iteration += 1
# #     if iteration % 500 == 0: # Print update every 500 iterations
# #         print(f"Iteration: {iteration}, Max Delta: {max_delta:.6f}")

# # print(f"\nSolver finished after {iteration} iterations.")
# # print(f"Final Max Delta: {max_delta:.6f}")

# # # --- 4. Visualize the Temperature Field (View Window) ---
# # # Matplotlib is used to create a heatmap of the temperature distribution.

# # plt.figure(figsize=(8, 6)) # Set the figure size for better readability
# # # Use imshow to display the 2D array as an image/heatmap.
# # # 'origin='lower'' sets the (0,0) index to the bottom-left of the plot.
# # # 'cmap='jet'' sets the colormap (e.g., 'jet', 'viridis', 'hot', 'cool').
# # plt.imshow(T, cmap='jet', origin='lower', extent=[0, grid_size, 0, grid_size])

# # # Add a color bar to show the temperature scale
# # plt.colorbar(label='Temperature ($^{\circ}C$)')

# # # Add title and labels
# # plt.title('2D Steady-State Heat Conduction', fontsize=16)
# # plt.xlabel('X-coordinate', fontsize=12)
# # plt.ylabel('Y-coordinate', fontsize=12)

# # # Add grid lines for better visualization of discrete points
# # plt.grid(color='white', linestyle='--', linewidth=0.5, alpha=0.7)

# # # Display the plot
# # plt.show()
# import numpy as np
# import matplotlib.pyplot as plt
# # import relevant solver library/wrapper (e.g., pyXFOIL, or code for subprocess calls)

# def run_airfoil_solver(angle_of_attack, mach_number, reynolds_number, airfoil_points=None):
#     """
#     This function would interface with your chosen fluid dynamics solver.
#     It takes flow conditions and potentially perturbed airfoil points,
#     runs the simulation, and returns lift and drag coefficients.
#     """
#     # Example: If using XFOIL via subprocess
#     # Generate XFOIL input script
#     # Run XFOIL: subprocess.run(['xfoil', '< input_script.txt'], capture_output=True, text=True)
#     # Parse XFOIL output to get CL and CD
#     # For simplicity, let's use dummy values for now:
#     cl = 0.5 + 0.05 * angle_of_attack + np.random.normal(0, 0.01) # Dummy lift
#     cd = 0.02 + 0.001 * angle_of_attack**2 + np.random.normal(0, 0.0005) # Dummy drag
#     return cl, cd

# # --- Monte Carlo Simulation Setup ---
# num_samples = 1000

# # Input parameter distributions
# # Angle of attack: Normal distribution (mean=5 deg, std_dev=1 deg)
# mean_alpha = 5.0
# std_alpha = 1.0
# sampled_alphas = np.random.normal(mean_alpha, std_alpha, num_samples)

# # Mach number: Uniform distribution (0.1 to 0.3)
# min_mach = 0.1
# max_mach = 0.3
# sampled_machs = np.random.uniform(min_mach, max_mach, num_samples)

# # Reynolds number: Normal distribution (mean=3e6, std_dev=0.5e6)
# mean_re = 3e6
# std_re = 0.5e6
# sampled_res = np.random.normal(mean_re, std_re, num_samples)

# # Initialize lists to store results
# results_cl = []
# results_cd = []

# # --- Monte Carlo Loop ---
# print("Running Monte Carlo simulation...")
# for i in range(num_samples):
#     alpha = sampled_alphas[i]
#     mach = sampled_machs[i]
#     re = sampled_res[i]

#     # In a real simulation, you might also perturb airfoil geometry here
#     # perturbed_airfoil = original_airfoil + np.random.normal(0, tolerance_std_dev, original_airfoil.shape)

#     cl, cd = run_airfoil_solver(alpha, mach, re) # Pass perturbed_airfoil if applicable
#     results_cl.append(cl)
#     results_cd.append(cd)

# print("Simulation complete. Analyzing results...")

# # --- Analysis and Visualization ---
# results_cl = np.array(results_cl)
# results_cd = np.array(results_cd)

# print(f"\nMean Lift Coefficient (CL): {np.mean(results_cl):.4f}")
# print(f"Std Dev Lift Coefficient (CL): {np.std(results_cl):.4f}")
# print(f"Mean Drag Coefficient (CD): {np.mean(results_cd):.4f}")
# print(f"Std Dev Drag Coefficient (CD): {np.std(results_cd):.4f}")

# # Plotting
# plt.figure(figsize=(12, 5))

# plt.subplot(1, 2, 1)
# plt.hist(results_cl, bins=30, edgecolor='black', alpha=0.7)
# plt.title('Distribution of Lift Coefficient ($C_L$)')
# plt.xlabel('$C_L$')
# plt.ylabel('Frequency')
# plt.grid(True)

# plt.subplot(1, 2, 2)
# plt.hist(results_cd, bins=30, edgecolor='black', alpha=0.7)
# plt.title('Distribution of Drag Coefficient ($C_D$)')
# plt.xlabel('$C_D$')
# plt.ylabel('Frequency')
# plt.grid(True)

# plt.tight_layout()
# plt.show()

# # Optional: Scatter plot of CL vs. CD
# plt.figure(figsize=(8, 6))
# plt.scatter(results_cd, results_cl, alpha=0.5, s=10)
# plt.title('Lift Coefficient vs. Drag Coefficient')
# plt.xlabel('$C_D$')
# plt.ylabel('$C_L$')
# plt.grid(True)
# plt.show()
